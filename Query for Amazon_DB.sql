-- Amazon_DB

-- Creating sellers table

CREATE TABLE sellers (seller_id VARCHAR(10),
					  seller_name VARCHAR(25)
);

SELECT * FROM sellers;

-- How to select specific column

SELECT seller_name FROM sellers;

-- Creating products table

CREATE TABLE products (product_id VARCHAR(10),
					  product_name VARCHAR(255),
					  price FLOAT,
					  cogs FLOAT
);

-- COUNT function

-- How many products we have in our data?

SELECT COUNT(product_id) as Total_products FROM products;

-- Creating customers table

CREATE TABLE customers (customer_id VARCHAR(10),
						customer_name VARCHAR(60),
						state VARCHAR(50)
);

-- Creating orders table

CREATE TABLE orders (order_id VARCHAR(10),
					 order_date DATE,
					 customer_id VARCHAR(15),
					 state VARCHAR(30),
					 category VARCHAR(50),
					 sub_category VARCHAR(30),
					 product_id VARCHAR(20),
					 price_per_unit FLOAT,
					 quantity INT,
					 sale FLOAT,
					 seller_id VARCHAR(10)
);

-- Creating returns table

CREATE TABLE returns (order_id VARCHAR(10),
					  return_id VARCHAR(20)
);

SELECT * FROM orders;
SELECT * FROM products;
SELECT * FROM sellers;
SELECT * FROM customers;
SELECT * FROM returns;

-- Business Problems set 1

-- Q1. What is the total revenue generated?

SELECT SUM(sale) as Total_revenue FROM orders;

-- Q2. How many products do we have?

SELECT COUNT(product_id) as Total_products FROM products;

-- DISTINCT is used to select unique cells by removing duplicates

SELECT COUNT(DISTINCT product_id) FROM orders;

-- Q3. Find out top 5 order details by sales amount?

SELECT * FROM orders
ORDER BY sale DESC
LIMIT 5;

-- If we want the sales in ascending order we can use ASC syntax
-- Or simply use ORDER BY sale

-- Q4. What is the average order value

SELECT AVG(sale) as Average_orders FROM orders;

-- Q5. What is the total sale for GOA?

SELECT SUM(sale) as Total_Goa_Revenue
FROM orders
WHERE state = 'Goa';

-- Q6. How many unique customers have placed orders?

SELECT COUNT(DISTINCT customer_id) as Unique_customers
FROM orders;

-- MAX and MIN

-- Find the highest order amount

SELECT MAX(sale) as Highes_order_amt
FROM orders;

SELECT sale
FROM orders
ORDER BY sale DESC
LIMIT 1;

-- Find lowest sale amount

SELECT MIN(sale) as Lowest_Sale_amt
FROM orders;

-- GROUP BY
-- It works with categorical data

-- Business problems set 2

-- Q7. What is the total sales revenue generated by each state?

SELECT 
	state,
	SUM(sale) as Total_revenue
FROM orders
WHERE state IS NOT NULL -- To remove the null values
GROUP BY state
ORDER BY Total_revenue ASC -- If we want least order values first
LIMIT 5; -- If we want first 5 least order values

-- Q8. Find top 3 products and revenue generated having revenue > 30000

SELECT
	product_id,
	SUM(sale) as Total_revenue
FROM orders
GROUP BY product_id
HAVING SUM(sale) > 30000 -- Having is only applicable on aggregator functions
ORDER BY Total_revenue DESC
LIMIT 3;

-- DATE FUNCTIONS

SELECT CURRENT_DATE;
SELECT CURRENT_TIME;

-- To extract month or year from current date

SELECT EXTRACT(MONTH FROM CURRENT_DATE);
SELECT EXTRACT(YEAR FROM CURRENT_DATE);

-- Q9. Which is the best selling month in 2022 based on revenue?
-- Group by month
-- Where year = 2022

SELECT
	EXTRACT(MONTH FROM order_date) as months,
	SUM(sale) as Total_sale
FROM orders
WHERE EXTRACT(YEAR FROM order_date) = 2022
GROUP BY months
ORDER BY Total_sale DESC
LIMIT 1;

-- Q10. How many orders were placed by each customer,
-- and what is their average order quantity?

SELECT * FROM orders;

SELECT
	customer_id,
	SUM(quantity) as Total_orders,
	AVG(quantity) as Avg_order_quantity
FROM orders
GROUP BY customer_id;

-- Q11. Which category has the highest average sale amount per order?

SELECT
	category,
	AVG(sale) as Avg_sale_amt
FROM orders
GROUP BY category
ORDER BY Avg_sale_amt DESC
LIMIT 1;

-- Q12. Identify the top 3 best-selling products(sub-categories) in terms of total quantity sold.

SELECT
	sub_category,
	SUM(quantity) as Total_quantity
FROM orders
GROUP BY sub_category
ORDER BY Total_quantity DESC
LIMIT 3;

-- JOINS

--Using INNER JOIN to combine orders table and customers table by customer_id

SELECT 
	o.order_id,
	o.state,
	o.sale,
	c.customer_name
FROM orders as o
INNER JOIN
customers as c
ON o.customer_id = c.customer_id;

-- LEFT JOIN

-- Business problems set 3

-- Q13. Identify all orders that have been returned, along with the details of the returns (if available). (LEFT JOIN)

SELECT 
	* 
FROM orders as o
LEFT JOIN
returns as r
ON o.order_id = r.order_id;

-- But from the above query, we are getting null values
-- from those orders which are not returned.
-- To get rid of null values, we can use below query instead

SELECT
	r.return_id,
	o.order_id,
	o.order_date,
	o.sale
FROM returns as r
LEFT JOIN
orders as o
ON r.order_id = o.order_id;

-- FULL JOIN

SELECT
	*
FROM orders as o
FULL JOIN
returns as r
ON o.order_id = r.order_id

-- Q14. Find customers name and total orders and total revenue

SELECT * FROM orders;
SELECT * FROM customers;

SELECT
	c.customer_id,
	c.customer_name,
	COUNT(o.order_id) as Total_orders,
	SUM(o.sale) as Total_revenue
FROM customers as c
RIGHT JOIN
orders as o
ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.customer_name;

-- Q15. Find all instances where products have been sold, returned, or both, along with the associated details.

SELECT
	o.product_id,
	o.sale,
	r.return_id
FROM products as p
FULL JOIN
orders as o
ON p.product_id = o.product_id
FULL JOIN
returns as r
ON r. order_id = o.order_id
WHERE r.return_id IS NOT NULL;

-- Day 1 projects/questions and answers

-- Q1. Retrieve all columns from the "orders" table

SELECT * FROM orders;

-- Q2. List the names and prices of all products from the "products" table

SELECT 
	product_name,
	price
FROM products;

-- Q3. Find orders with a sale amount greater than $100 from the "orders" table.

SELECT
	order_id,
	sale
FROM orders
WHERE sale > 100;

-- Q4. Calculate the total number of customers from the "customers" table.

SELECT
	COUNT(*) as Total_customers
FROM customers;

-- Q5. List the products in ascending order of their prices from the "products" table.

SELECT
	*
FROM products
ORDER BY price;

-- Q6. Find total count of orders and total sales by each seller_id

SELECT 
	seller_id,
	COUNT(*) as Total_orders,
	SUM(sale) as Total_sales
FROM orders
GROUP BY seller_id;

-- Q7. Find out total COUNT of products from products table (hint distinct products)?

SELECT
	COUNT(DISTINCT product_id) as Total_products
FROM products;

-- Q8. Find the total count of orders  and total sale for category ‘furniture’
-- and ‘Technology’ (hint use IN operator)

SELECT
	orders.category,
	COUNT(order_id) as Total_orders,
	SUM(sale) as Total_sale
FROM orders
WHERE category IN ('Furniture', 'Technology')
GROUP BY orders.category;

-- Q9. Find total number of returns?

SELECT
	COUNT(*) as Total_returns
FROM returns;

-- Q10. Find the top 5 product_id and the quantity sold and revenue generated 
-- (hint use group by, count and SUM)

SELECT
	product_id,
	SUM(quantity) as Total_quantity,
	SUM(sale) as Total_revenue
FROM orders
GROUP BY product_id
ORDER BY Total_revenue DESC
LIMIT 5;

-- Q11. Find top 3 states and revenue generated Having revenue > 30000

SELECT 
	state,
	SUM(sale) as Total_revenue
FROM orders
GROUP BY state
HAVING SUM(sale) > 30000
ORDER BY Total_revenue DESC
LIMIT 3;

------

SELECT
	state,
	COUNT(1)
	FROM orders
GROUP BY 1
HAVING COUNT(1) > 400;

------------------

-- Day 2 END Assignment

-- Question 16
-- Which customers have placed orders with a total sale amount greater than the
-- average sale amount across all orders? (Subquery)

SELECT * FROM orders;

SELECT c.customer_name
FROM customers c
JOIN (
  SELECT customer_id, SUM(sale) AS total_sale
  FROM orders
  GROUP BY customer_id
  HAVING SUM(sale) > (
    SELECT AVG(sale)
    FROM orders
  )
) o 
ON c.customer_id = o.customer_id;

-- Question 17
-- What is the total quantity of products sold in each category, 
-- and how does it compare to the average quantity sold across all categories? (Subquery)

SELECT 
  category, 
  SUM(quantity) AS total_quantity,
  (
    SELECT AVG(qty)
    FROM (
      SELECT category, SUM(quantity) AS qty
      FROM orders
      GROUP BY category
    ) AS sub
  ) AS avg_quantity
FROM orders
GROUP BY category;

------------------
-- Question 18
-- Find top 5 products whose revenue has decreased compared to previous year
-- find top 5 products based on revenue = year = 2023
-- find top 5 products based on revenue = year = 2022
-- We have to use CTE

SELECT * FROM orders;

WITH last_year_sale
AS
(
SELECT
	product_id,
	SUM(sale) as total_sale_prev_year
FROM orders
WHERE EXTRACT(YEAR FROM order_date) = EXTRACT(YEAR FROM current_date) - 2
GROUP BY product_id
),
current_year_sale
AS
(
SELECT
	product_id,
	SUM(sale) as total_sale_crnt_year
FROM orders
WHERE EXTRACT(YEAR FROM order_date) = EXTRACT(YEAR FROM current_date) - 1
GROUP BY product_id
)

SELECT
	ls.product_id,
	ls.total_sale_prev_year,
	cs.total_sale_crnt_year,
	(ls.total_sale_prev_year - cs.total_sale_crnt_year) AS revenue_decrease
FROM last_year_sale as ls
JOIN
current_year_sale as cs
ON ls.product_id = cs.product_id
WHERE ls.total_sale_prev_year > cs.total_sale_crnt_year
ORDER BY revenue_decrease DESC
LIMIT 5;

-- SELF JOIN
-- is joining a table with another table where there is no match

-- CROSS JOIN
-- is joining the same table between their columns based on some logic

SELECT
	o1.order_id,
	o1.state,
	o1.sale,
	o2.sale,
	o2.customer_id
FROM orders o1
CROSS JOIN
orders as o2
WHERE o1.order_id = o2.order_id;

